using System.ComponentModel.DataAnnotations;

namespace Day3_Assign1_Inheritance
{
    /*
     * Create the following classes
Employee
   Prop	
	string Name -> no blanks
	int EmpNo -> readonly, autogenerated
	short DeptNo -> > 0
	abstract decimal Basic 
   Methods
	abstract decimal CalcNetSalary()


Manager : Employee
   Prop
	string Designation -> cant be blank
	

GeneralManager : Manager
   Prop
 	string Perks -> no validations

CEO : Employee
      Make CalNetSalary() a sealed method

NOTE : Overloaded constructors in all classes calling their base class constructor 
All classes must implement IDbFunctions interface
All classes to override the abstract members defined in the base class(Employee). Basic property to have different validation in different classes.
CalcNetSalary() to have different validation in different classes.

     * 
     */
    internal class Program
    {
        
        static void Main(string[] args)
        {
            Console.WriteLine("enter manager name,dept no, designation, basic pay");
            Employee employee = new Manager(Console.ReadLine(), Convert.ToInt16(Console.ReadLine()), Console.ReadLine(), Convert.ToDecimal(Console.ReadLine()));
           Console.WriteLine("manager net salary : " + employee.calNetSalary());
            Console.WriteLine(employee.EmpId);
            Console.WriteLine("enter General manager name,dept no, designation,perks, basic pay");
            employee = new GeneralManager(Console.ReadLine(), Convert.ToInt16(Console.ReadLine()), Console.ReadLine(),Console.ReadLine(), Convert.ToDecimal(Console.ReadLine()));
            Console.WriteLine((employee as GeneralManager)!.Perks);
            Console.WriteLine("net salary : "+employee.calNetSalary());
            Console.WriteLine("enter CEO name,dept no, basic pay");
            employee = new CEO(Console.ReadLine(), Convert.ToInt16(Console.ReadLine()), Convert.ToDecimal(Console.ReadLine()));
            Console.WriteLine("net salary : " + employee.calNetSalary());


        }
    }

    public abstract class Employee
    {
        private static int id = 0;

        private  int empId;
        public  int EmpId
        {
            get { return empId; }
            private set { empId = value; }
        }

        private string name;
        public String? Name
        {
            get { return name; }
            set
            {
                String? n = value!.Trim();
                if (n.Equals(null))
                {
                    Console.WriteLine("Blank names are not allowed!!!");
                }
                else
                {
                    name = n;
                }
            }
        }
        private short deptNo;
        public short DeptNo
        {
            get { return deptNo; }
            set
            {
                if (value < 0)
                {
                    Console.WriteLine("Invalid Dept No!!!");
                    return;
                }
                else
                    deptNo = value;
            }
        }

        protected decimal basicPay;
        public abstract decimal BasicPay
        {
           get; set;
        }

        public Employee(String? name = null, short deptNo = 1)
        {
            EmpId = ++id;
            this.Name = name;
            this.DeptNo = deptNo;
           
        }

        public abstract decimal calNetSalary();
        


    }

    public class Manager : Employee , IDMInterface
    {
      
        public override decimal BasicPay
        {
            get { return basicPay; }
            set
            {
                if (value < 1000)
                {
                    Console.WriteLine("Invalid Basic pay(>1000)");
                }
                else
                {
                    basicPay = value;
                }
            }
        }
        private String designation;
        public String? Designation { get; set; }

        public Manager(String? name = null, short deptNo = 1, String? designation = null, decimal basicPay = 0) : base(name, deptNo)
        {
            this.Designation = designation;
            this.BasicPay = basicPay;
        }
 
        public override decimal calNetSalary()
        {
            return MathClass1.CalculateSalary.CalSalary(BasicPay,2.5M);
        }
       

    }

    public class GeneralManager : Manager , IDMInterface
    {
        private String perks;
        public String? Perks
        {
            get; set;
        }
      
        public override decimal BasicPay
        {
            get { return basicPay; }
            set
            {
                if (value < 2000)
                {
                    Console.WriteLine("Invalid Basic pay(>2000)");
                }
                else
                {
                    basicPay = value;
                }
            }
        }
        public GeneralManager(String? name = null, short deptNo = 1, String? designation = null,String? perks=null, decimal basicPay = 0) : base(name, deptNo,designation)
        {
            this.Perks = perks;
           Console.WriteLine(basicPay);
            this.BasicPay = basicPay;
        }

        public override decimal calNetSalary()
        {
            return MathClass1.CalculateSalary.CalSalary(BasicPay, 2.5M);
        }

    }

    public class CEO : Employee, IDMInterface
    {

        public override decimal BasicPay
        {
            get { return basicPay; }
            set
            {
                if (value < 5000)
                {
                    Console.WriteLine("Invalid Basic pay(>5000)");
                }
                else
                {
                    basicPay = value;
                }
            }
        }
        public CEO(String? name = null, short deptNo = 1, decimal basicPay = 0) : base(name, deptNo)
        {
            this.basicPay = basicPay;
        }

        public sealed override decimal calNetSalary()
        {
            return MathClass1.CalculateSalary.CalSalary(BasicPay, 5);
        }

    }
    public interface IDMInterface
    {
      
     
    }
}